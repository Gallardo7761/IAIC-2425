using Pkg
Pkg.activate(".")
Pkg.instantiate()

# Funci√≥n auxiliar para borrar la terminal REPL
function clc()
    if Sys.iswindows()
        return read(run(`powershell cls`), String)
    elseif Sys.isunix()
        return read(run(`clear`), String)
    elseif Sys.islinux()
        return read(run(`printf "\033c"`), String)
    end
end


# Problemas de Satisfacci√≥n de Restricciones
# ==========================================

#=
Comenzamos cargando las librer√≠as que necesitaremos para la realizaci√≥n de la 
pr√°ctica. Las esenciales son:
    * `ConstraintSolver`: proporciona las funciones que permiten definir un CSP 
	tal y como lo hemos visto en clase.
    * `JuMP`: un conjunto de funciones de b√∫squeda y optimizaci√≥n muy especia-
	lizadas que nos permiten resolver problemas con restricciones de forma 
	transparente a 	partir de las definiciones de la librer√≠a anterior.
    * `Printf`: librer√≠a auxiliar que facilita la entrada/salida de informaci√≥n
	en la consola.
=#


# Pkg.add("ConstraintSolver")
using ConstraintSolver 				# Librer√≠a de CSP
# Pkg.add("Printf")
using Printf                 		# Auxiliar para print
# Pkg.add("JuMP")
using JuMP                  	    # Librer√≠a de optimizaci√≥n (usada por CSP)
const CS = ConstraintSolver     	# Para facilitar el uso de ConstraintSolver


#------------------------------------------------------------------------------
#        Ejemplos
#------------------------------------------------------------------------------

# Vamos a comenzar mostrando algunos ejemplos resueltos para mostrar las carac-
# ter√≠sticas esenciales de la definici√≥n y resoluci√≥n de CSPs con las librer√≠as 
# usadas. M√°s adelante habr√° algunos ejercicios propuestos que deben ser resuel-
# tos para poner a prueba la correcta asimilaci√≥n del contenido del tema.

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

## Un ejemplo sencillo
## -------------------

# Vamos a comenzar con un ejemplo muy sencillo (y muy poco interesante) para 
# que queden claras las diversas estructuras y m√©todos que se usan para definir
# y resolver un Problema de Satisfacci√≥n de Restricciones con los paquetes dis-
# ponibles:

# Encontrar los pares (x,y) ‚àà [1,10]√ó[1,10] que verifican x + y = 14.

# Comenzamos resolviendo el sistema para encontrar una soluci√≥n cualquiera 
# (puede haber muchas, solo queremos una):

# Comenzamos limpiando la terminal, pero solo por motivos de claridad en la
# explicaci√≥n (observa el `;` al final de la instrucci√≥n)
clc();

# ----- Definici√≥n -------

# Declaraci√≥n del modelo que servir√° para almacenar el problema
model = Model(CS.Optimizer) 

# Declaraci√≥n de las variables simb√≥licas que intervienen (y sus tipos y
# dominios)
@variable(model, 1 <= x <= 10, Int)
@variable(model, 1 <= y <= 10, Int)

# Declaraci√≥n de las restricciones que definen el problema
@constraint(model, x + y == 14)

# ------ Solucionador -------

# Resolvemos con el optimizador (por defecto, JUMP)
optimize!(model)

# ------- Presentaci√≥n de resultados ------------

# Extraemos una soluci√≥n (realmente, JUMP almacena en x,y mucha m√°s informaci√≥n
# que ha usado durante la resoluci√≥n, a nosotros nos interesa sus valores num√©-
# ricos, que es una de las informaciones guardadas)

xsol = JuMP.value(x)
ysol = JuMP.value(y)

# Se puede hacer de forma m√°s corta como: 
#     xsol, ysol = JuMP.value.([x,y])

println("Soluci√≥n encontrada: x: $xsol , y: $ysol")

# Observa que las soluciones se muestran como Float

# Veamos c√≥mo podr√≠amos usar el solucionador para encontrar todas las 
# soluciones:

# ‚ö† Hay problemas que tienen una cantidad enorme de soluciones, as√≠ que se 
# debes ser cauto a la hora de buscar todas las soluciones de un problema.

clc();

# Declaraci√≥n del modelo que servir√° para almacenar el problema: Observa que es
# aqu√≠ donde indicamos un cambio en la forma en que debe funcionar la interfaz

model = Model(optimizer_with_attributes(CS.Optimizer, 
	"all_solutions" => true,
	"logging"       => []
))

# Declaraci√≥n de las variables que intervienen (y sus tipos y dominios)
@variable(model, 1 <= x <= 10, Int)
@variable(model, 1 <= y <= 10, Int)

# Declaraci√≥n de las restricciones que definen el problema
@constraint(model, x + y == 14)

# ------ Solucionador -------

# Resolvemos con el optimizador (por defecto, JUMP)
optimize!(model)

# Extraemos todas las soluciones
num_sols = MOI.get(model, MOI.ResultCount())   # MOI.ResultCount() extrae el n¬∫ de soluciones
println("N¬∫ Soluciones encontradas: $num_sols\n")
for sol in 1:num_sols
	xs, ys = convert.(Integer, JuMP.value.([x,y]; result = sol)) # üëÄ `;` en la separaci√≥n de argumentos
	println("Soluci√≥n n¬∫ $sol: x: $xs , y: $ys")  # üëÄ interpolaci√≥n de cadenas
end

# üíÅ Si quieres saber qu√© tipos de variables, restricciones y objetivos admite
# el paquete `ConstraintSolver`, puedes consultar [esta p√°gina]
# (https://wikunia.github.io/ConstraintSolver.jl/stable/supported/) 
# (es la distribuci√≥n oficial del paquete).

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

## Coloreado de Mapas
## ------------------

# Dado un mapa, y un n√∫mero de colores, dar una coloraci√≥n v√°lida del mapa: dos
# paises con frontera com√∫n deben colorearse con colores distintos.

# Se puede identificar con la asignaci√≥n de colores a los nodos de un grafo, 
# donde dos nodos vecinos deben colorearse con colores distintos. Por ello, el 
# coloreado de mapas es lo mismo que el coloreado de grafos.

# La forma m√°s sencilla de formalizarlo como un CSP es asociar una variable a 
# cada pa√≠s (suponemos que tenemos N pa√≠ses), que va a tomar como valor el 
# color que se le asigna, y poner como restricciones:
#   1. El color se puede representar como un n√∫mero entero entre 1 y K (el 
#		n√∫mero de colores que tenemos).
#   2. Los valores/colores de dos pa√≠ses con frontera com√∫n (nodos conectados) 
#		deben ser distintos.

# Es decir, si x_1,...,x_N son los colores asociados a los pa√≠ses p_1,...,p_N, 
# respectivamente, entonces:
#   1. ‚àÄ i ‚àà {1,...,N} (1 ‚â§ x_i ‚â§ K)
#   2. ‚àÄ i,j‚àà {1,...,N} (p_i fronterizo con p_j ‚Üí x_i ‚â† x_j)

clc();
model = Model(CS.Optimizer)

# Vamos a considerar los siguientes pa√≠ses:
#     Alemania, Suiza, Francia, Italia, Espa√±a

# Creaci√≥n de las variables asociadas al problema (en este caso, solo 5 pa√≠ses,
# 4 colores)
@variable(model, 1 <= x[1:5] <= 4, Int)  # üëÄ x es ahora un array


# A√±adiendo restricciones por paises con frontera com√∫n
@constraint(model, x[1] != x[3]) # Alemania tiene frontera con Francia
@constraint(model, x[1] != x[2]) # Alemania tiene frontera con Suiza
@constraint(model, x[3] != x[5]) # Francia tiene frontera con Espa√±a
@constraint(model, x[3] != x[2]) # Francia tiene frontera con Suiza
@constraint(model, x[3] != x[4]) # Francia tiene frontera con Italia
@constraint(model, x[2] != x[4]) # Suiza tiene frontera con Italia
	
# Lanzamos la optimizaci√≥n
optimize!(model)

# Mostramos el vector de colores asignados a los pa√≠ses en la soluci√≥n 
# encontrada
println(convert.(Integer, JuMP.value.(x)))

# Pero podemos mejorar considerablemente la representaci√≥n con un par de 
# retoques, y convirtiendo el problema de satisfacci√≥n en un problema de 
# optimizaci√≥n, minimizando el n√∫mero de colores necesarios para la soluci√≥n 
# (es decir, que no solo damos un coloreado del mapa, sino que lo hacemos 
# usando el menor n√∫mero posible de colores para este mapa):

clc();
model = Model(optimizer_with_attributes(CS.Optimizer, 
	"logging"       => []
	))
num_colors = 5

# Creaci√≥n de las variables asociadas al problema (en este caso, solo 5 pa√≠ses)
@variable(model, 1 <= x[1:5] <= num_colors, Int)

# Aunque ser√° m√°s c√≥modo trabajar con las variables gen√©ricas anteriores, 
# podemos darles un nombre reconocible para que las restricciones sean m√°s 
# intuitivas y podamos interpretar los resultados de forma m√°s sencilla. Con la
# siguiente definici√≥n podemos trabajar indistintamente con la nomenclatura que 
# nos parezca m√°s c√≥moda en cada caso:
alemania, suiza, francia, italia, espa√±a = x # üëÄ Asignaci√≥n m√∫ltiple

# Restricciones por paises con frontera com√∫n, esta vez usando los nombres de 
# las variables asociadas a cada pa√≠s:
@constraint(model, alemania != francia)
@constraint(model, alemania != suiza)
@constraint(model, francia != espa√±a)
@constraint(model, francia != suiza)
@constraint(model, francia != italia)
@constraint(model, suiza != italia)

# Creaci√≥n de una variable adicional para minimizar el n√∫mero de colores 
# necesarios. No es necesaria, porque podr√≠amos proponer una cantidad fija de
# colores iniciales y ver si somos capaces de encontrar soluci√≥n
@variable(model, 1 <= max_color <= num_colors, Int)

# El color asociado a cada pa√≠s debe ser <= que el n√∫mero m√°ximo de colores
@constraint(model, max_color .>= x) # üëÄ operador `.`

# Marcamos minimzaci√≥n de max_color como objetivo de optimizaci√≥n
@objective(model, Min, max_color)

# Lanzamos la optimizaci√≥n
optimize!(model)

# Podemos obtener el estado de parada del optimizador
# 	status = JuMP.termination_status(model)

# Mostramos el n√∫mero de colores necesarios que ha conseguido optimizar
println("N¬∫ colores: $(convert(Integer,JuMP.value(max_color)))")

# y los colores asignados a los pa√≠ses en la soluci√≥n encontrada
alemania, suiza, francia, italia, espa√±a = convert.(Integer, JuMP.value.(x))

println("Colores asignados por paises 
Alemania: $alemania
Suiza: $suiza
Francia: $francia
Italia: $italia
Espa√±a: $espa√±a")

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

## send + more = money
## -------------------

# Problema de Criptoaritm√©tica: asignar valores (d√≠gitos entre 0 y 9) a las 
# letras anteriores de forma que la suma sea correcta. Letras distintas tienen 
# asignaciones distintas, y ninguna de las cifras empieza por $0$.

# La soluci√≥n m√°s directa e intuitiva es asignar un valor (entre 0 y 9) a cada 
# letra, y obligar a que se verifique esa igualdad num√©rica (que se puede ex-
# presar como un c√°lculo a partir de los valores de las variables anteriores). 
# De esta forma, tenemos una primera aproximaci√≥n (algo burda) a la definici√≥n 
# del problema como un CSP:

clc();
# Modelo de solucionador de restricciones y estableciendo ConstraintSolver como
#  optimizador.
model = Model(optimizer_with_attributes(CS.Optimizer, 
	"logging"       => []
	))

# Definimos las variables necesarias para el modelado del problema
@variable(model, 0 <= x[1:8] <= 9, Int)
s, e, n, d, m, o, r, y = x  # üëÄ Aqu√≠ las variables-letras son simb√≥licas

# Todas deben tener valores distintos
#   Es tan habitual imponer este tipo de restricciones que todos los resolvedo-
#	res de CSP tienen incorporada una restricci√≥n compacta para obligar a un 
#	conjunto de variables que sean distintas entre s√≠ (2 a 2).
@constraint(model, x[1:8] in CS.AllDifferentSet())  # üëÄ Es una funci√≥n auxiliar que a√±ade ConstraintSolver

# Los n√∫meros no empiezan por 0
@constraint(model, m != 0)
@constraint(model, s != 0)

# Restricci√≥n num√©rica (muy "bruta")
@constraint(model, d + 10n + 100e + 1000s + e + 10r + 100o + 1000m == y + 10e + 100n + 1000o + 10000m)

# Lanzamos el optimizador
optimize!(model)

# Mostramos los valores asignados a cada letras en la soluci√≥n encontrada
vx = convert.(Integer, JuMP.value.(x)) # üëÄ uso de `convert` y `.`
s, e, n, d, m, o, r, y = vx # üëÄ Aqu√≠ las variables-letras son enteros
println("s = $s, e = $e, n = $n, d = $d, m = $m, o = $o, r = $r, y = $y")
println("$s$e$n$d + $m$o$r$e = $m$o$n$e$y")


# El problema de la formalizaci√≥n anterior es que solo usa una gran restricci√≥n
# que precisa que todas las variables est√©n instanciadas para poder decidir si 
# es v√°lida o no. Esto significa que los algoritmos basados en backtracking y 
# comprobaci√≥n avanzada no podr√°n podar la b√∫squeda de forma prematura (lo que
# hubiera permitido ahorrar muchas construcciones de asignaciones y sus corres-
# pondientes, y fallidas, comprobaciones).

# Por ello, vamos a dar una segunda formalizaci√≥n que divide esa gran restric-
# ci√≥n en un conjunto de restricciones menores, a costa de introducir algunas 
# variables de acarreo adicionales. La idea es usar la suma por d√≠gitos que se 
# realiza en base 10:

#      c3 c2 c1
#      s  e  n  d
#   +  m  o  r  e
#   -------------
#   m  o  n  e  y

clc();
# Modelo de solucionador de restricciones y estableciendo ConstraintSolver como
# optimizador.
model = Model(optimizer_with_attributes(CS.Optimizer, 
	"logging"       => []
	))

# Definimos las variables necesarias para el modelado del problema
@variable(model, 0 <= x[1:8] <= 9, Int)
s, e, n, d, m, o, r, y = x
@variable(model, 0 <= c[1:3] <= 1, Int)
c1, c2, c3 = c

# Todas deben tener valores distintos
@constraint(model, x[1:8] in CS.AllDifferentSet())

# Los n√∫meros no empiezan por 0
@constraint(model, m != 0)
@constraint(model, s != 0)

# Restricci√≥n num√©rica por cada suma de d√≠gitos
@constraint(model, e + d == y + 10c1)
@constraint(model, c1 + n + r == e + 10c2)
@constraint(model, c2 + e + o == n + 10c3)
@constraint(model, c3 + s + m == 10m + o)

# Lanzamos el optimizador
optimize!(model)

# Miramos el estado de parada del optimizador
# 	status = JuMP.termination_status(model2b)
# Mostramos los colores asignados a los pa√≠ses en la soluci√≥n encontrada
vx = convert.(Integer, JuMP.value.(x))
s, e, n, d, m, o, r, y = vx
println("s = $s, e = $e, n = $n, d = $d, m = $m, o = $o, r = $r, y = $y")
println("$s$e$n$d + $m$o$r$e = $m$o$n$e$y")


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

## Sudoku
## ------

# Es un problema ampliamente conocido, as√≠ que lo describimos muy brevemente: 
# Una rejilla de 9√ó9 en la que se deben colocar n√∫meros entre 1 y 9 con la 
# condici√≥n de que:
#   1. En cada fila no se repiten n√∫meros.
#   2. En cada columna no se repiten n√∫meros.
#   3. En cada submatriz de tama√±o 3√ó3 no se repiten n√∫meros (estas submatrices
#		dividen la rejilla completa en 9 espacios disjuntos del mismo tama√±o).
#   4. A veces, se dan algunos valores fijos en la rejilla inicial que hay que 
#		respetar.

# Por tanto, la formalizaci√≥n m√°s directa como CSP consiste en considerar una 
# variable X_{ij} para cada posici√≥n (i,j)‚àà {1,...,9}^2 y que toman valores en
# [1,9]. Con esta representaci√≥n, las restricciones se escriben de forma casi
# directa.

clc();
# Problema de Sudoku concreto (los 0s representan casillas vac√≠as):
grid = [
	6 0 2 0 5 0 0 0 0
	0 0 0 0 0 3 0 4 0
	0 0 0 0 0 0 0 0 0
	4 3 0 0 0 8 0 0 0
	0 1 0 0 0 0 2 0 0
	0 0 0 0 0 0 7 0 0
	5 0 0 2 7 0 0 0 0
	0 0 0 0 0 0 0 8 1
	0 0 0 6 0 0 0 0 0]

# Modelo CSP y variables
model = Model(CS.Optimizer)

# Definimos las 81 variables asociadas al problema: las 81 variables de la
# rejilla
@variable(model, 1 <= x[1:9, 1:9] <= 9, Int)

# Asignamos valores conocidos a celdas fijas (las no nulas)
for r = 1:9, c = 1:9
	if grid[r, c] != 0
		@constraint(model, x[r, c] == grid[r, c])
	end
end

# Restricci√≥n de valores distintos en cada fila y cada columna
for rc = 1:9
	@constraint(model, x[rc, :] in CS.AllDifferentSet())  # üëÄ uso de [rc, :] , [:, rc]
	@constraint(model, x[:, rc] in CS.AllDifferentSet())
end

# Valores distintos en cada submatriz/bloque 3x3
for br = 0:2
	for bc = 0:2
		@constraint(model, vec(x[3br + 1:3(br+1), 3bc + 1:3(bc+1)]) in CS.AllDifferentSet()) # üëÄ uso de submatrices
	end
end

# Lanzamos el optimizador
optimize!(model)
	
# Devolvemos la soluci√≥n encontrada 
convert.(Integer, JuMP.value.(x)) # üëÄ conversi√≥n directa de toda la matriz, `convert` y `.`

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

## Puzzle de las Esquinas
## ----------------------

# Este rompecabezas pide que se coloquen los d√≠gitos del 1 al 8 en los bordes
# del cuadrado (tal y como se indica en la figura siguiente, un d√≠gito en cada
# celda) de modo que el n√∫mero de cada celda lateral sea igual a la suma de los
# n√∫meros de las esquinas contiguas.  
  
#    NO ‚îÇ N | NE
#   ------------
#    O  ‚îÇ   ‚îÇ E
#   ------------
#    SO ‚îÇ S ‚îÇ SE

# A partir de este ejemplo, vamos a crear funciones que permitan parametrizar
# la generaci√≥n de soluciones personalizando la llamada al optimizador por
# medio de argumentos con nombre.
# En este caso, vamos a intentar dar todas las posibles soluciones, no la
# primera que encuentre el resolvedor en su proceso de b√∫squeda, as√≠ que
# tendremos que modificar algunos atributos que este trae por defecto. En el
# c√≥digo puedes ver no solo la modificaci√≥n del atributo que permite generar
# todas las soluciones, sino otros atributos que modifican el proceso de
# b√∫squeda de asignaciones, el tiempo de b√∫squeda permitido, etc.

# Observa que, al definirse la estructura del modelo dentro de la funci√≥n, las
# variables que se usan son de forma natural locales a la misma, por lo que no
# hace falta explicitarlo, como s√≠ hemos hecho en los ejemplos anteriores.

# Como el modelado del problema es bastante directo no detallaremos aqu√≠
# ninguna caracter√≠stica adicional, toda la informaci√≥n relevante se puede
# extraer del a lectura del c√≥digo.

clc();
function esquinas(print_solutions=true, all_solutions=true, timeout=6)

	# Mostramos la forma de fijar hiperpar√°metros en el optimizador
    model = Model(optimizer_with_attributes(CS.Optimizer, 
        "all_solutions" => all_solutions,
        "logging" => [], 
        "time_limit" => timeout,
    ))

    # Son 8 variables, con valores enteros
    @variable(model, 1 <= x[1:8] <= 8, Int)
	
    # a los que asignamos nombres para facilitar la escritura
    NO, N, NE, O, E, SO, S, SE = x
    
	# Todos los valores distintos
    @constraint(model, x in CS.AllDifferent())
    
	# Restricciones: Casilla_Lado = Casilla_Esquina1 + Casilla_Esquina2
    @constraint(model, N == NO + NE)
    @constraint(model, O == NO + SO)
    @constraint(model, E == NE + SE)
    @constraint(model, S == SO + SE)

    # Resoluci√≥n del Problema
    optimize!(model)

    # Recogemos el estado del resolvedor en la parada (nos puede indicar si no
	# ha encontradp soluciones, por ejemplo)
    status = JuMP.termination_status(model)

    # Impresi√≥n de las soluciones (si las hay, en este caso, como se sabe que 
	# s√≠ hay soluci√≥n, se muestra solo para que se conozca su uso)
    if status == MOI.OPTIMAL
    	num_sols = MOI.get(model, MOI.ResultCount())
        println("N¬∫ Soluciones encontradas: $num_sols\n")
        if print_solutions
            for sol in 1:num_sols
                NO, N, NE, O, E, SO, S, SE = convert.(Integer, JuMP.value.(x; result=sol))
				println("             $NO $N $NE")
                println("Soluci√≥n #$sol: $O   $E")
                println("             $SO $S $SE")
                println()
            end
        end
    else
        println("Status: $status")
    end
end

clc();
@time esquinas() # üëÄ macro @time para tener informaci√≥n de recursos de ejecuci√≥n

# üëÄ Las 8 soluciones son realmente giros y simetr√≠as de la misma.

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

## N - Reinas
## ----------

# Plantea c√≥mo disponer en un tablero de ajedrez de tama√±o N√óN (el tablero de
# ajedrez est√°ndar es N=8), N reinas de forma que no haya amenazas entre ning√∫n
# par de ellas (recordemos que una reina amenaza a toda la fila, columna y
# diagonales de la casilla en la que se sit√∫a).

# PlutoUI.Show(MIME"image/png"(), read("./img/8queens.jpg"))

# Este problema ha sido ya resuelto en los recursos de teor√≠a de 3 formas
# distintas. Observa que la soluci√≥n dada aqu√≠ es ligeramente distinta a todas
# ellas, intenta analizar por qu√© funciona y c√≥mo traduce los 4 tipos de
# restricciones (filas, columnas, y ambas diagonales).

clc();
function nqueens(n=8, print_solutions=true, all_solutions=true, timeout=6)
    	
	model = Model(optimizer_with_attributes(CS.Optimizer, 
		"all_solutions" => all_solutions,
        "logging" => [], 
        "time_limit" => timeout,
    ))

	# Variables
    @variable(model, 1 <= x[1:n] <= n, Int)

	# Restricciones
    @constraint(model, x in CS.AllDifferent())
    @constraint(model, [x[i] + i for i in 1:n] in CS.AllDifferent())
    @constraint(model, [x[i] - i for i in 1:n] in CS.AllDifferent())

    # Resoluci√≥n del modelo
    optimize!(model)

    status = JuMP.termination_status(model)

	num_sols = 0
    if status == MOI.OPTIMAL
        num_sols = MOI.get(model, MOI.ResultCount())
        if print_solutions
            for sol in 1:num_sols
                x_val = convert.(Integer, JuMP.value.(x; result=sol))
                println("Sol #$sol: $x_val")

            end
        end
    else
        println("status:$status")
    end
end

clc();
@time nqueens(8)

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

## Clases en la E.T.S.I.I
## ----------------------

# Alicia, al volver de la escuela, describe las cuatro asignaturas (IA, SI, MD
# y PD) a las que ha asistido a su amigo Juan. A Juan le interesan las cuatro
# asignaturas, pero ella no recuerda exactamente en qu√© aula fue cada una ni el
# orden, solo recuerda haber visitado la A1.16, H1.12, I1.32, y la F0.10, y
# alguna informaci√≥nn adicional:

#  1. Alicia acudi√≥  a la la H1.12 para SI.
#  2. Despu√©s de haber acudido a MD no fue la  F0.10.
#  3. La segunda clase la recibi√≥ en la A1.16.
#  4. Dos clases despu√©s de salir de la I1.32, acudi√≥ a PD.
    
# Identifica d√≥nde se imparte cada asignatura y en qu√© orden.

clc();
function asignaturas(print_solutions=true, all_solutions=true)

	model = Model(optimizer_with_attributes(CS.Optimizer, 
		"all_solutions" => all_solutions,
        "logging" => []
	))

    # Modelaremos el problema con 2 conjuntos de variables de 4 elementos: una
	# para asignaturas y otra para aulas. El valor que tenga cada variable
	# indicar√° el orden que ocupa el elemento asociado.
	
    # Lista de asignaturas
    @variable(model, 1 <= asigs[1:4] <= 4, Int)
    IA, SI, MD, PD = asigs
    # Lista de Aulas
    @variable(model, 1 <= aulas[1:4] <= 4, Int)
    F010, A116, I132, H112 = aulas

    # Todos los ordenes de asignaturas/aulas son distintos
    @constraint(model, asigs in CS.AllDifferent())
    @constraint(model, aulas in CS.AllDifferent())
	
    #  1. Alicia atendi√≥ a SI en la H1.12.
    @constraint(model, SI == H112)
    # 2. El aula a la que asisti√≥ justo despu√©s de acudir a MD no fue la F0.10.
    @constraint(model, MD + 1 != F010)
    #  3. A1.16 fue la segunda aula a la que fue Alicia.
    @constraint(model, A116 == 2)
    # 4. Dos clases despu√©s de salir de la I1.32, Alicia acudi√≥ a PD.
    @constraint(model, I132 + 2 == PD)

    # Lanzamos el optimizador
    optimize!(model)
    
	# Registramos el estado de parada
    status = JuMP.termination_status(model)

    # Imprimimos las soluciones encontradas
    if status == MOI.OPTIMAL
        num_sols = MOI.get(model, MOI.ResultCount())
        println("num_sols: $num_sols\n")
        if print_solutions
            for sol in 1:num_sols
                println("Soluci√≥n #$sol:")
                asigs_val = convert.(Integer, JuMP.value.(asigs; result=sol))
                aulas_val = convert.(Integer, JuMP.value.(aulas; result=sol))
                println("  Orden Asignaturas [IA, SI, MD, PD]: $asigs_val")
                println("  Orden Aulas [F0.10, A1.16, I1.32, H1.12]: $aulas_val")
                println()
            end
        end
    else
        println("status:$status")
    end
end

clc();
@time asignaturas()

## Monjes y puertas
## ----------------

# Hay una habitaci√≥n con cuatro puertas (denotadas por A, B, C y D) y ocho
# monjes. Una o m√°s de las puertas pueden ser de salida. Cada monje puede
# mentir o no.

# Los monjes hacen las siguientes afirmaciones:
#  * Monje 1: La puerta A es de salida.
#  * Monje 2: Al menos una de las puertas B y C es de salida.
#  * Monje 3: El monje 1 y el monje 2 dicen la verdad.
#  * Monje 4: Las puertas A y B son ambas salidas.
#  * Monje 5: Las puertas A y C son ambas salidas.
#  * Monje 6: O el monje 4 o el monje 5 dicen la verdad.
#  * Monje 7: Si el Monje 3 dice la verdad, tambi√©n lo hace el Monje 6.
#  * Monje 8: Si el monje 7 y el monje 8 dicen la verdad, el monje 1 tambi√©n.

# ¬øQu√© puerta/s son salidas? ¬øPuedes determinar qui√©n dice la verdad y qui√©n
# miente? ¬øY si a√±adimos la informaci√≥n de que solo una de las puertas es la
# salida?

# Para este problema disponemos de varias aproximaciones, en ellas se hace uso
# de una representaci√≥n del problema por medio de variables booleanas (por
# ejemplo, la afirmaci√≥n "la puerta A es una salida" puede ser verdad o
# mentira), pero en algunos casos podemos transformar las conectivas l√≥gicas
# (AND, OR, ...) en operaciones aritm√©ticas, mientras que en otros casos
# podemos dejarlas como conectivas l√≥gicas usando los operadores l√≥gicos de
# Julia.

# Transformaci√≥n L√≥gica ‚áã Aritm√©tica
#	Para transformar las relaciones l√≥gicas habituales en relaciones aritm√©-
#	ticas (teniendo en cuenta que $true=1$ y $false=0$) basta tener presente
#	que:
    
#     | F√≥rmula L√≥gica | Equivalencia Aritm√©tica|
#     |:---------------|:----------------------:|
#     |A ‚àß B           | A + B = 2              |
#     |A ‚à® B           | A + B ‚â• 1              |
#     |A xor B         | A + B = 1              |
#     |A ‚áí B           | A ‚â§ B                  |
#     |A ‚áî B           | A = B                  | 
#     -------------------------------------------

# Por lo que podemos representar el problema como (las posibles variantes de
# cada restricci√≥n se dan como l√≠neas comentadas):

clc();
function monjes_y_puertas(print_solutions=true, all_solutions=true, timeout=6)

    model = Model(optimizer_with_attributes(CS.Optimizer, 
		"all_solutions" => all_solutions,
        "logging" => [], 
        "time_limit" => timeout,
    ))

    num_puertas = 4
    num_monjes = 8

	# dx = true ‚Üî dx de salida
    @variable(model, puertas[1:num_puertas], Bin)
    da, db, dc, dd = puertas
    puertas_nombres = ["A", "B", "C", "D"]

	# my = true ‚Üî my dice la verdad
    @variable(model, monjes[1:num_monjes], Bin)
    m1, m2, m3, m4, m5, m6, m7, m8 = monjes

    # Monje 1: La puerta A es de salida.
    @constraint(model, m1 == da) 

    # Monje 2: Al menos una de las puertas B y C es salida.
    # @constraint(model, m2 := { db + dc >= 1})
    # @constraint(model, m2 := { db == 1 || dc == 1})
    @constraint(model, m2 := {db || dc}) # üëÄ `:=` permite a√±adir restricciones booleanas

    # Monje 3: El monje 1 y el monje 2 dicen la verdad.
    # @constraint(model, m3 := { m1 + m2 == 2})
    # @constraint(model, m3 := { m1 == 1 && m2 == 1})
    @constraint(model, m3 := {m1 && m2})

    # Monje 4: Las puertas A y B son ambas salidas.
    # @constraint(model, m4 := { da + db == 2})
    # @constraint(model, m4 := { da == 1 && db == 1})
    @constraint(model, m4 := {da && db})

    # Monje 5: Las puertas A y C son ambas salidas.
    # @constraint(model, m5 := { da + dc == 2})
    # @constraint(model, m5 := { da == 1 && dc == 1})
    @constraint(model, m5 := {da && dc})

    # Monje 6: O el monje 4 o el monje 5 dicen la verdad.
    # @constraint(model, m6 := { m4 + m5 == 1})
    # @constraint(model, m6 := { m4 == 1|| m5 == 1})
    @constraint(model, m6 := {m4 || m5})

    # Monje 7: Si el Monje 3 dice la verdad, tambi√©n lo hace el Monje 6.
    # @constraint(model, m7 := { m3 <= m6}) # ORIG
    # @constraint(model, m7 := { m3 => m6})  # No funciona!
    @constraint(model, m7 := {m3 => {m6 == 1}})

    # Monje 8: Si el monje 7 y el monje 8 dicen la verdad, el monje 1 tambi√©n.
    b1 = @variable(model, binary = true)
    @constraint(model, b1 := {m7 == 1 && m8 == 1})
    @constraint(model, m8 := {b1 <= m1})

    # Hay exactamente una salida
    # @constraint(model, da + db + dc + dd == 1) # ‚ö† Comentar o descomentar dependiendo de si la consideramos

    # Lanzamos el solver
    optimize!(model)

	# Mostramos resultados
    status = JuMP.termination_status(model)
    if status == MOI.OPTIMAL
        num_sols = MOI.get(model, MOI.ResultCount())
        println("num_sols:$num_sols\n")
        if print_solutions
            for sol in 1:num_sols
                println("Soluci√≥n #$sol:")
                puertas_val = convert.(Integer, JuMP.value.(puertas; result=sol))
                monjes_val = convert.(Integer, JuMP.value.(monjes; result=sol))
                println("Puertas: $puertas_val  Monjes: $monjes_val")
                println("Salidas       : ", [puertas_nombres[i] for i in 1:num_puertas if puertas_val[i] == 1])
                println("Monjes veraces: ", [m for m in 1:num_monjes if monjes_val[m] == 1])
				println("")
            end
        end
    else
        println("status:$status")
    end
end

@time monjes_y_puertas()

#------------------------------------------------------------------------------
#        Ejercicios Propuestos
#------------------------------------------------------------------------------

## Noticias
## --------

# El Daily Galaxy envi√≥ a sus cuatro mejores reporteros (Carlos, Jaime, Luis y
# Pedro), a diferentes lugares (Granada, C√°diz, Sevilla, y C√≥rdoba), para
# cubrir cuatro noticias de √∫ltima hora: nacimiento de un beb√© de 100Kg, lanza-
# miento de un dirigible hecho de globos infantiles, inauguraci√≥n de un rasca-
# cielos de 3Km de altura, y la aparici√≥n de una ballena varada de color rosa. 

# El editor del peri√≥dico intenta recordar d√≥nde se encuentra cada uno de los
# reporteros y qu√© noticia ha cubierto, pero solo tiene la siguiente informa-
# ci√≥n parcial confirmada:

	# 1. El beb√© no naci√≥ ni en C√≥rdoba ni en C√°diz.
	# 2. Jaime no fue a Sevilla.
	# 3. El lanzamiento del dirigible y la inauguraci√≥n del rascacielos fueron
	#	cubiertos, en alg√∫n orden, por Luis y el reportero que fue enviado a 
	#	Sevilla.
	# 4. C√≥rdoba no fue el lugar de la ballena varada ni de la inauguraci√≥n del
	#	rascacielos. 
	# 5. Granada es el lugar al que fue Carlos, el lugar donde var√≥ la ballena,
	#	o ambos.

## Arquero
## -------

# Teniendo en cuenta que una diana tiene las puntuaciones 16, 17, 23, 24, 39,
# 40 en sus diferentes c√≠rculos, y que el arquero puede tirar tantas flechas
# como quiera. ¬øCu√°l ser√≠a la mejor distribuci√≥n de tiros para quedarse lo m√°s
# cerca posible de 100?

## Monedas
## -------

# ¬øCu√°l es el n√∫mero m√≠nimo de monedas que permite pagar exactamente cualquier
# cantidad inferior a un euro? Recordemos que existen seis moneda de c√©ntimos
# de euro, de denominaci√≥n 1, 2, 5, 10, 20, 50.

## Tomograf√≠a Discreta
## -------------------

# Una matriz que contiene 0s y 1s se escanea vertical y horizontalmente, dando
# el n√∫mero total de 1s en cada fila y columna. El problema consiste en recons-
# truir el contenido de la matriz a partir de esta informaci√≥n. Por ejemplo:

    #    0 0 7 1 6 3 4 5 2 7 0 0
    # 0
    # 0 
    # 8      ‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ† 
    # 2      ‚ñ†             ‚ñ†
    # 6      ‚ñ†   ‚ñ† ‚ñ† ‚ñ† ‚ñ†   ‚ñ†
    # 4      ‚ñ†   ‚ñ†     ‚ñ†   ‚ñ†
    # 5      ‚ñ†   ‚ñ†   ‚ñ† ‚ñ†   ‚ñ†
    # 3      ‚ñ†   ‚ñ†         ‚ñ†
    # 7      ‚ñ†   ‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ†
    # 0
    # 0

## Diferencia m√≠nima
## -----------------

# A partir de los d√≠gitos (0 a 9) construimos 2 n√∫meros, X e Y, cada uno de 5
# d√≠gitos, y sin repetirse ninguno entre ellos (es decir, vistos como conjun-
# tos, X e Y forman una partici√≥n de 0:9). ¬øCu√°l es la diferencia m√≠nima que
# se puede conseguir?

## Sucesiones M√°gicas
## ------------------

# Una sucesi√≥n m√°gica de longitud n es una sucesi√≥n de enteros x_0 ... x_{n-1}
# entre 0 y n-1, tal que para todo 0 ‚â§ i ‚â§ n-1, el n√∫mero i aparece exactamente
# x_i veces en la sucesi√≥n. Por ejemplo, 6,2,1,0,0,0,1,0,0,0 es una sucesi√≥n
# m√°gica, ya que el 0 aparece 6 veces en ella, el 1 aparece 2 veces, el 2 apa-
# rece 1 vez, etc.

# Construye sucesiones m√°gicas por medio de CSP.

## Buscaminas
## ----------

# Un campo minado viene dado por una matriz num√©rica que indica cu√°ntas minas
# son adyacentes a cada posici√≥n (si hay un n√∫mero, no puede haber una mina). 
# En el siguiente ejemplo: 
	# en el campo minado de entrada los ‚ñ† representan que ese dato es descono-
	#	cido (pudiendo haber, o no, una mina en esa posici√≥n), 
	# en la soluci√≥n, los ‚ñ° representan un espacio sin mina, y * representa una
	#	mina, 
	# las posiciones con n√∫meros indican el n√∫mero de minas que le rodean (no
	#	hay minas en ellos).
# El objetivo consiste en decubrir d√≥nde est√°n todas las minas de un campo
# minado de entrada.

# Por ejemplo:

# 	‚ñ† ‚ñ† 2 ‚ñ† 3 ‚ñ† 		* ‚ñ° 2 ‚ñ° 3 *
# 	2 ‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ† 		2 * ‚ñ° * * ‚ñ°
# 	‚ñ† ‚ñ† 2 4 ‚ñ† 3   ==>	‚ñ° ‚ñ° 2 4 * 3
# 	1 ‚ñ† 3 4 ‚ñ† ‚ñ† 		1 ‚ñ° 3 4 * ‚ñ°
# 	‚ñ† ‚ñ† ‚ñ† ‚ñ† ‚ñ† 3 		‚ñ° * * * ‚ñ° 3
# 	‚ñ† 3 ‚ñ† 3 ‚ñ† ‚ñ† 		* 3 ‚ñ° 3 * *

# A continuaci√≥n se dan algunos ejemplos concretos con los que se puede
# trabajar.

clc();
# M representa un valor desconocido (el ‚ñ† del ejemplo anterior)
M = -1	

buscaminas_problemas = Dict(
	:0 =>
			[[M, M, 2, M, 3, M],
			[2, M, M, M, M, M],
			[M, M, 2, 4, M, 3],
			[1, M, 3, 4, M, M],
			[M, M, M, M, M, 3],
			[M, 3, M, 3, M, M]],

	:1 =>
			[[M, 2, M, 2, 1, 1, M, M],
			[M, M, 4, M, 2, M, M, 2],
			[2, M, M, 2, M, M, 3, M],
			[2, M, 2, 2, M, 3, M, 3],
			[M, M, 1, M, M, M, 4, M],
			[1, M, M, M, 2, M, M, 3],
			[M, 2, M, 2, 2, M, 3, M],
			[1, M, 1, M, M, 1, M, 1]],

	:2 =>
			[[1, M, M, 2, M, 2, M, 2, M, M],
			[M, 3, 2, M, M, M, 4, M, M, 1],
			[M, M, M, 1, 3, M, M, M, 4, M],
			[3, M, 1, M, M, M, 3, M, M, M],
			[M, 2, 1, M, 1, M, M, 3, M, 2],
			[M, 3, M, 2, M, M, 2, M, 1, M],
			[2, M, M, 3, 2, M, M, 2, M, M],
			[M, 3, M, M, M, 3, 2, M, M, 3],
			[M, M, 3, M, 3, 3, M, M, M, M],
			[M, 2, M, 2, M, M, M, 2, 2, M]],

	:3 =>
			[[2, M, M, M, 3, M, 1, M],
			[M, 5, M, 4, M, M, M, 1],
			[M, M, 5, M, M, 4, M, M],
			[2, M, M, M, 4, M, 5, M],
			[M, 2, M, 4, M, M, M, 2],
			[M, M, 5, M, M, 4, M, M],
			[2, M, M, M, 5, M, 4, M],
			[M, 3, M, 3, M, M, M, 2]],

	:4 =>
			[[0, M, 0, M, 1, M, M, 1, 1, M],
			[1, M, 2, M, 2, M, 2, 2, M, M],
			[M, M, M, M, M, M, 2, M, M, 2],
			[M, 2, 3, M, 1, 1, M, M, M, M],
			[0, M, M, M, M, M, M, 2, M, 1],
			[M, M, M, 2, 2, M, 1, M, M, M],
			[M, M, M, M, M, 3, M, 3, 2, M],
			[M, 5, M, 2, M, M, M, 3, M, 1],
			[M, 3, M, 1, M, M, 3, M, M, M],
			[M, 2, M, M, M, 1, 2, M, M, 0]],

	:5 =>
			[[M, 2, 1, M, 2, M, 2, M, M, M],
			[M, 4, M, M, 3, M, M, M, 5, 3],
			[M, M, M, 4, M, 4, 4, M, M, 3],
			[4, M, 4, M, M, 5, M, 6, M, M],
			[M, M, 4, 5, M, M, M, M, 5, 4],
			[3, 4, M, M, M, M, 5, 5, M, M],
			[M, M, 4, M, 4, M, M, 5, M, 5],
			[2, M, M, 3, 3, M, 6, M, M, M],
			[3, 6, M, M, M, 3, M, M, 4, M],
			[M, M, M, 4, M, 2, M, 2, 1, M]],

	:6 =>
			[[M, 3, 2, M, M, 1, M, M],
			[M, M, M, M, 1, M, M, 3],
			[3, M, M, 2, M, M, M, 4],
			[M, 5, M, M, M, 5, M, M],
			[M, M, 6, M, M, M, 5, M],
			[3, M, M, M, 5, M, M, 4],
			[2, M, M, 5, M, M, M, M],
			[M, M, 2, M, M, 3, 4, M]],

	:7 =>
			[[M, 1, M, M, M, M, M, 3, M],
			[M, M, M, 3, 4, 3, M, M, M],
			[2, 4, 4, M, M, M, 4, 4, 3],
			[M, M, M, 4, M, 4, M, M, M],
			[M, 4, M, 4, M, 3, M, 6, M],
			[M, M, M, 4, M, 3, M, M, M],
			[1, 2, 3, M, M, M, 1, 3, 3],
			[M, M, M, 3, 2, 2, M, M, M],
			[M, 2, M, M, M, M, M, 3, M]],

	:8 =>
			[[M, M, M, M, M, M, M],
			[M, 2, 3, 4, 3, 5, M],
			[M, 1, M, M, M, 3, M],
			[M, M, M, 5, M, M, M],
			[M, 1, M, M, M, 3, M],
			[M, 1, 2, 2, 3, 4, M],
			[M, M, M, M, M, M, M]],

	:9 =>
			[[2, M, M, M, 2, M, M, M, 2],
			[M, 4, M, 4, M, 3, M, 4, M],
			[M, M, 4, M, M, M, 1, M, M],
			[M, 4, M, 3, M, 3, M, 4, M],
			[2, M, M, M, M, M, M, M, 2],
			[M, 5, M, 4, M, 5, M, 4, M],
			[M, M, 3, M, M, M, 3, M, M],
			[M, 4, M, 3, M, 5, M, 6, M],
			[2, M, M, M, 1, M, M, M, 2]],

	:10 =>
			[[M, M, M, M, M, M],
			[M, 2, 2, 2, 2, M],
			[M, 2, 0, 0, 2, M],
			[M, 2, 0, 0, 2, M],
			[M, 2, 2, 2, 2, M],
			[M, M, M, M, M, M]],

	:11 =>
			[[2, 3, M, 2, 2, M, 2, 1],
			[M, M, 4, M, M, 4, M, 2],
			[M, M, M, M, M, M, 4, M],
			[M, 5, M, 6, M, M, M, 2],
			[2, M, M, M, 5, 5, M, 2],
			[1, 3, 4, M, M, M, 4, M],
			[0, 1, M, 4, M, M, M, 3],
			[0, 1, 2, M, 2, 3, M, 2]],

	:12 =>
			[[M, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, M],
			[M, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, M],
			[M, M, 1, M, M, 1, M, M, 1, M, M, 1, M, M],
			[M, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, M],
			[M, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, M]],

	:13 =>
			[[M, M, M, 0, M, M, M, 0, M, M, M],
			[M, M, M, 0, 1, M, 1, 0, M, M, M],
			[M, M, M, 0, 1, M, 1, 0, M, M, M],
			[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
			[M, 1, 1, 1, 1, M, 1, 1, 1, 1, M],
			[M, M, M, 1, M, 2, M, 1, M, M, M],
			[M, 1, 1, 1, 1, M, 1, 1, 1, 1, M],
			[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
			[M, M, M, 0, 1, M, 1, 0, M, M, M],
			[M, M, M, 0, 1, M, 1, 0, M, M, M],
			[M, M, M, 0, M, M, M, 0, M, M, M]],

	:14 =>
			[[M, 1, M, 1, M, 1],
			[2, M, 2, M, 1, M],
			[M, 3, M, 2, M, 1],
			[1, M, 3, M, 2, M],
			[M, 1, M, 2, M, 1]],

	:15 =>
			[[0, 0, 0, 0, 1, M, M, M, M],
			[0, 0, 0, 0, 1, M, M, 3, M],
			[0, 0, 1, 1, 2, M, M, M, M],
			[0, 0, 1, M, M, M, M, 1, M],
			[0, 0, 1, 2, M, 3, M, M, M],
			[0, 0, 0, 1, M, M, M, M, M],
			[0, 0, 1, 2, 2, 1, 1, 1, 1],
			[0, 0, 1, M, 1, 0, 0, 0, 0],
			[0, 0, 1, M, 1, 0, 0, 0, 0]])


# C√≥mo funciona Constraint Solver?

# Se puede tener una idea m√°s detallada de c√≥mo ha evolucionado este proyecto y
# c√≥mo se ha dise√±ado en el [blog del autor](https://opensourc.es/blog/constraint-solver-1).

# Se trata de un proyecto en curso y en continuo cambio, por tanto, aqu√≠ solo
# veremos el estado actual del proyecto y de una forma muy intuitiva y resumida.

## Concepto general
# Constrint Solver trabaja sobre un conjunto de variables discretas acotadas.
# Por ejemplo, si tenemos una restricci√≥n `all_different([x,y])` y `x` est√°
# fijada en `3`, entonces ese valor puede eliminarse directamente del conjunto
# de valores posibles para `y`. Ahora que `y` ha cambiado, esto puede llevar a
# que se elimine la restricci√≥n `all_different([x,y])`, y adem√°s puede que se
# produzcan nuevas mejoras llamando a las restricciones en las que interviene
# `y` (haciendo que el espacio de b√∫squeda se haga m√°s peque√±o).

# Despu√©s de este paso podr√≠a resultar que el problema es inviable o que ya
# est√© resuelto, pero la mayor√≠a de las veces a√∫n no se sabe. Es entonces
# cuando entra en juego el backtracking.

## Backtracking

# En el backtracking dividimos el modelo actual en varios modelos, en cada uno
# de los cuales fijamos una variable a un valor determinado. Esto crea una
# estructura en forma de √°rbol. El solucionador de restricciones decide c√≥mo
# dividir el modelo en varias partes. La mayor√≠a de las veces es √∫til dividirlo
# en pocas partes en lugar de en muchas. Esto significa que si tenemos dos
# variables. `x` e `y`, y `x` tiene 3 valores posibles despu√©s del primer paso,
# e `y` tiene 9 valores posibles, preferimos elegir `x` para crear tres nuevas
# ramas en nuestro √°rbol en vez de 9. Esto es √∫til ya que obtenemos informaci√≥n
# sobre los valores posibles, y as√≠ obtenemos m√°s informaci√≥n por paso de
# resoluci√≥n.

# Despu√©s de fijar un valor vamos a uno de los nodos abiertos (posible mundo).
# Un nodo abierto es un nodo del √°rbol que a√∫n no hemos dividido (es un nodo
# hoja) y que no es ni inviable ni una soluci√≥n fija (por lo que debemos seguir
# desarroll√°ndolo).

# Hay dos tipos de problemas que tienen una estrategia de backtracking diferen-
# te. Uno de ellos es un problema de viabilidad, como el de resolver sudokus, y
# el otro es un problema de optimizaci√≥n, como el de colorear mapas/grafos.

# En el primer caso probamos una rama hasta llegar a un nodo hoja y luego
# retrocedemos hasta demostrar que el problema no es factible o nos detenemos
# cuando encontramos una soluci√≥n factible.

# Para problemas de optimizaci√≥n se elige un nodo que tenga la mejor cota
# (mejor objetivo posible) y si hay varios se elige el de mayor profundidad.

# En general el solucionador guarda lo que ha cambiado en cada paso para poder
# actualizar el espacio de b√∫squeda actual al saltar a un nodo abierto diferen-
# te en el √°rbol.
